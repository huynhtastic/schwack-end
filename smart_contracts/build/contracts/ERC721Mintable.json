{
  "contractName": "ERC721Mintable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceMinter",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052620000416301ffc9a77c0100000000000000000000000000000000000000000000000000000000026200009e640100000000026401000000009004565b6200007e6380ac58cd7c0100000000000000000000000000000000000000000000000000000000026200009e640100000000026401000000009004565b62000098336200015c640100000000026401000000009004565b6200031e565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614151515620000f057600080fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b62000180816005620001c6640100000000026200156f179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156200020357600080fd5b6200021e828262000289640100000000026401000000009004565b1515156200022b57600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515620002c757600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61172f806200032e6000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146100d5578063081812fc14610147578063095ea7b3146101c257806323b872dd1461021d57806340c10f191461029857806342842e0e1461030b5780636352211e1461038657806370a0823114610401578063983b2d561461046657806398650275146104b7578063a22cb465146104ce578063aa271e1a1461052b578063b88d4fde14610594578063e985e9c5146106a6575b600080fd5b3480156100e157600080fd5b5061012d600480360360208110156100f857600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061072f565b604051808215151515815260200191505060405180910390f35b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b8101908080359060200190929190505050610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b5061021b600480360360408110156101e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e7565b005b34801561022957600080fd5b506102966004803603606081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092c565b005b3480156102a457600080fd5b506102f1600480360360408110156102bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610951565b604051808215151515815260200191505060405180910390f35b34801561031757600080fd5b506103846004803603606081101561032e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061097b565b005b34801561039257600080fd5b506103bf600480360360208110156103a957600080fd5b810190808035906020019092919050505061099c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040d57600080fd5b506104506004803603602081101561042457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a1a565b6040518082815260200191505060405180910390f35b34801561047257600080fd5b506104b56004803603602081101561048957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa5565b005b3480156104c357600080fd5b506104cc610ac5565b005b3480156104da57600080fd5b50610529600480360360408110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610ad0565b005b34801561053757600080fd5b5061057a6004803603602081101561054e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c0c565b604051808215151515815260200191505060405180910390f35b3480156105a057600080fd5b506106a4600480360360808110156105b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561061e57600080fd5b82018360208201111561063057600080fd5b8035906020019184600183028401116401000000008311171561065257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c29565b005b3480156106b257600080fd5b50610715600480360360408110156106c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c51565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006107a182610ce5565b15156107ac57600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107f28261099c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561082f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061086f575061086e8133610c51565b5b151561087a57600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6109363382610d57565b151561094157600080fd5b61094c838383610dec565b505050565b600061095c33610c0c565b151561096757600080fd5b6109718383610fb3565b6001905092915050565b6109978383836020604051908101604052806000815250610c29565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a1157600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5757600080fd5b610a9e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110fd565b9050919050565b610aae33610c0c565b1515610ab957600080fd5b610ac28161110b565b50565b610ace33611165565b565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b0b57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000610c228260056111bf90919063ffffffff16565b9050919050565b610c3484848461092c565b610c4084848484611253565b1515610c4b57600080fd5b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610d638361099c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dd257508373ffffffffffffffffffffffffffffffffffffffff16610dba84610796565b73ffffffffffffffffffffffffffffffffffffffff16145b80610de35750610de28185610c51565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e0c8261099c565b73ffffffffffffffffffffffffffffffffffffffff16141515610e2e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610e6a57600080fd5b610e7381611476565b610eba600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611536565b610f01600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611559565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610fef57600080fd5b610ff881610ce5565b15151561100457600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061109d600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611559565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600081600001549050919050565b61111f81600561156f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61117981600561161f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111fc57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006112748473ffffffffffffffffffffffffffffffffffffffff166116ce565b1515611283576001905061146e565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561137a57808201518184015260208101905061135f565b50505050905090810190601f1680156113a75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115335760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b61154e600182600001546116e190919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115ab57600080fd5b6115b582826111bf565b1515156115c157600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561165b57600080fd5b61166582826111bf565b151561167057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080823b905060008111915050919050565b60008282111515156116f257600080fd5b60008284039050809150509291505056fea165627a7a7230582017c522360b12e4085c73c51b071c8e727d0f1091b20c42804451a607ef1d74150029",
  "deployedBytecode": "0x6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146100d5578063081812fc14610147578063095ea7b3146101c257806323b872dd1461021d57806340c10f191461029857806342842e0e1461030b5780636352211e1461038657806370a0823114610401578063983b2d561461046657806398650275146104b7578063a22cb465146104ce578063aa271e1a1461052b578063b88d4fde14610594578063e985e9c5146106a6575b600080fd5b3480156100e157600080fd5b5061012d600480360360208110156100f857600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061072f565b604051808215151515815260200191505060405180910390f35b34801561015357600080fd5b506101806004803603602081101561016a57600080fd5b8101908080359060200190929190505050610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101ce57600080fd5b5061021b600480360360408110156101e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e7565b005b34801561022957600080fd5b506102966004803603606081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092c565b005b3480156102a457600080fd5b506102f1600480360360408110156102bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610951565b604051808215151515815260200191505060405180910390f35b34801561031757600080fd5b506103846004803603606081101561032e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061097b565b005b34801561039257600080fd5b506103bf600480360360208110156103a957600080fd5b810190808035906020019092919050505061099c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040d57600080fd5b506104506004803603602081101561042457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a1a565b6040518082815260200191505060405180910390f35b34801561047257600080fd5b506104b56004803603602081101561048957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa5565b005b3480156104c357600080fd5b506104cc610ac5565b005b3480156104da57600080fd5b50610529600480360360408110156104f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050610ad0565b005b34801561053757600080fd5b5061057a6004803603602081101561054e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c0c565b604051808215151515815260200191505060405180910390f35b3480156105a057600080fd5b506106a4600480360360808110156105b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561061e57600080fd5b82018360208201111561063057600080fd5b8035906020019184600183028401116401000000008311171561065257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c29565b005b3480156106b257600080fd5b50610715600480360360408110156106c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c51565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b60006107a182610ce5565b15156107ac57600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107f28261099c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561082f57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061086f575061086e8133610c51565b5b151561087a57600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6109363382610d57565b151561094157600080fd5b61094c838383610dec565b505050565b600061095c33610c0c565b151561096757600080fd5b6109718383610fb3565b6001905092915050565b6109978383836020604051908101604052806000815250610c29565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610a1157600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5757600080fd5b610a9e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206110fd565b9050919050565b610aae33610c0c565b1515610ab957600080fd5b610ac28161110b565b50565b610ace33611165565b565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b0b57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000610c228260056111bf90919063ffffffff16565b9050919050565b610c3484848461092c565b610c4084848484611253565b1515610c4b57600080fd5b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080610d638361099c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dd257508373ffffffffffffffffffffffffffffffffffffffff16610dba84610796565b73ffffffffffffffffffffffffffffffffffffffff16145b80610de35750610de28185610c51565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e0c8261099c565b73ffffffffffffffffffffffffffffffffffffffff16141515610e2e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610e6a57600080fd5b610e7381611476565b610eba600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611536565b610f01600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611559565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610fef57600080fd5b610ff881610ce5565b15151561100457600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061109d600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611559565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600081600001549050919050565b61111f81600561156f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61117981600561161f90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156111fc57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006112748473ffffffffffffffffffffffffffffffffffffffff166116ce565b1515611283576001905061146e565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561137a57808201518184015260208101905061135f565b50505050905090810190601f1680156113a75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050506040513d60208110156113f357600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156115335760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b61154e600182600001546116e190919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156115ab57600080fd5b6115b582826111bf565b1515156115c157600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561165b57600080fd5b61166582826111bf565b151561167057600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080823b905060008111915050919050565b60008282111515156116f257600080fd5b60008284039050809150509291505056fea165627a7a7230582017c522360b12e4085c73c51b071c8e727d0f1091b20c42804451a607ef1d74150029",
  "sourceMap": "155:421:3:-;;;648:40:11;245:10;667:20;;648:18;;;:40;;;:::i;:::-;1989::0;1246:10;2008:20;;1989:18;;;:40;;;:::i;:::-;283:22:8;294:10;283;;;:22;;;:::i;:::-;155:421:3;;998:158:11;1088:10;1073:25;;:11;:25;;;;;1065:34;;;;;;;;1145:4;1109:20;:33;1130:11;1109:33;;;;;;;;;;;;;;;;;;:40;;;;;;;;;;;;;;;;;;998:158;:::o;693:119:8:-;749:21;762:7;749:8;:12;;;;;;:21;;;;;:::i;:::-;797:7;785:20;;;;;;;;;;;;693:119;:::o;268:181:9:-;363:1;344:21;;:7;:21;;;;336:30;;;;;;;;385:18;389:4;395:7;385:3;;;:18;;;:::i;:::-;384:19;376:28;;;;;;;;438:4;415;:11;;:20;427:7;415:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;268:181;;:::o;795:162::-;867:4;910:1;891:21;;:7;:21;;;;883:30;;;;;;;;930:4;:11;;:20;942:7;930:20;;;;;;;;;;;;;;;;;;;;;;;;;923:27;;795:162;;;;:::o;155:421:3:-;;;;;;;",
  "deployedSourceMap": "155:421:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:133:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;786:133:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;786:133:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3792:151:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3792:151:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3792:151:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3215:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3215:292:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3215:292:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5348:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5348:180:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5348:180:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;442:132:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;442:132:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;442:132:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6161::0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6161:132:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6161:132:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2617:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2617:177:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2617:177:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2239:160;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2239:160:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2239:160:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;516:90:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;516:90:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;516:90:8;;;;;;;;;;;;;;;;;;;;;;612:75;;8:9:-1;5:2;;;30:1;27;20:12;5:2;612:75:8;;;;;;4235:213:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4235:213:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4235:213:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;403:107:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;403:107:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;403:107:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6998:211:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6998:211:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;6998:211:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6998:211:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6998:211:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;6998:211:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6998:211:0;;;;;;;;;;;;;;;;;;4769:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4769:145:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4769:145:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;786:133:11;856:4;879:20;:33;900:11;879:33;;;;;;;;;;;;;;;;;;;;;;;;;;;872:40;;786:133;;;:::o;3792:151:0:-;3851:7;3878:16;3886:7;3878;:16::i;:::-;3870:25;;;;;;;;3912:15;:24;3928:7;3912:24;;;;;;;;;;;;;;;;;;;;;3905:31;;3792:151;;;:::o;3215:292::-;3278:13;3294:16;3302:7;3294;:16::i;:::-;3278:32;;3334:5;3328:11;;:2;:11;;;;3320:20;;;;;;;;3372:5;3358:19;;:10;:19;;;:58;;;;3381:35;3398:5;3405:10;3381:16;:35::i;:::-;3358:58;3350:67;;;;;;;;3455:2;3428:15;:24;3444:7;3428:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;3492:7;3488:2;3472:28;;3481:5;3472:28;;;;;;;;;;;;3215:292;;;:::o;5348:180::-;5438:39;5457:10;5469:7;5438:18;:39::i;:::-;5430:48;;;;;;;;5489:32;5503:4;5509:2;5513:7;5489:13;:32::i;:::-;5348:180;;;:::o;442:132:3:-;512:4;358:20:8;367:10;358:8;:20::i;:::-;350:29;;;;;;;;528:18:3;534:2;538:7;528:5;:18::i;:::-;563:4;556:11;;442:132;;;;:::o;6161::0:-;6247:39;6264:4;6270:2;6274:7;6247:39;;;;;;;;;;;;;:16;:39::i;:::-;6161:132;;;:::o;2617:177::-;2672:7;2691:13;2707:11;:20;2719:7;2707:20;;;;;;;;;;;;;;;;;;;;;2691:36;;2762:1;2745:19;;:5;:19;;;;2737:28;;;;;;;;2782:5;2775:12;;;2617:177;;;:::o;2239:160::-;2294:7;2338:1;2321:19;;:5;:19;;;;2313:28;;;;;;;;2358:34;:17;:24;2376:5;2358:24;;;;;;;;;;;;;;;:32;:34::i;:::-;2351:41;;2239:160;;;:::o;516:90:8:-;358:20;367:10;358:8;:20::i;:::-;350:29;;;;;;;;580:19;591:7;580:10;:19::i;:::-;516:90;:::o;612:75::-;655:25;669:10;655:13;:25::i;:::-;612:75::o;4235:213:0:-;4320:10;4314:16;;:2;:16;;;;4306:25;;;;;;;;4378:8;4341:18;:30;4360:10;4341:30;;;;;;;;;;;;;;;:34;4372:2;4341:34;;;;;;;;;;;;;;;;:45;;;;;;;;;;;;;;;;;;4428:2;4401:40;;4416:10;4401:40;;;4432:8;4401:40;;;;;;;;;;;;;;;;;;;;;;4235:213;;:::o;403:107:8:-;459:4;482:21;495:7;482:8;:12;;:21;;;;:::i;:::-;475:28;;403:107;;;:::o;6998:211:0:-;7104:31;7117:4;7123:2;7127:7;7104:12;:31::i;:::-;7153:48;7176:4;7182:2;7186:7;7195:5;7153:22;:48::i;:::-;7145:57;;;;;;;;6998:211;;;;:::o;4769:145::-;4849:4;4872:18;:25;4891:5;4872:25;;;;;;;;;;;;;;;:35;4898:8;4872:35;;;;;;;;;;;;;;;;;;;;;;;;;4865:42;;4769:145;;;;:::o;7403:152::-;7460:4;7476:13;7492:11;:20;7504:7;7492:20;;;;;;;;;;;;;;;;;;;;;7476:36;;7546:1;7529:19;;:5;:19;;;;7522:26;;;7403:152;;;:::o;7915:246::-;8000:4;8016:13;8032:16;8040:7;8032;:16::i;:::-;8016:32;;8077:5;8066:16;;:7;:16;;;:51;;;;8110:7;8086:31;;:20;8098:7;8086:11;:20::i;:::-;:31;;;8066:51;:87;;;;8121:32;8138:5;8145:7;8121:16;:32::i;:::-;8066:87;8058:96;;;7915:246;;;;:::o;9863:362::-;9976:4;9956:24;;:16;9964:7;9956;:16::i;:::-;:24;;;9948:33;;;;;;;;10013:1;9999:16;;:2;:16;;;;9991:25;;;;;;;;10027:23;10042:7;10027:14;:23::i;:::-;10061:35;:17;:23;10079:4;10061:23;;;;;;;;;;;;;;;:33;:35::i;:::-;10106:33;:17;:21;10124:2;10106:21;;;;;;;;;;;;;;;:31;:33::i;:::-;10173:2;10150:11;:20;10162:7;10150:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;10210:7;10206:2;10191:27;;10200:4;10191:27;;;;;;;;;;;;9863:362;;;:::o;8404:259::-;8489:1;8475:16;;:2;:16;;;;8467:25;;;;;;;;8511:16;8519:7;8511;:16::i;:::-;8510:17;8502:26;;;;;;;;8562:2;8539:11;:20;8551:7;8539:20;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;8574:33;:17;:21;8592:2;8574:21;;;;;;;;;;;;;;;:31;:33::i;:::-;8648:7;8644:2;8623:33;;8640:1;8623:33;;;;;;;;;;;;8404:259;;:::o;1069:112:10:-;1134:7;1160;:14;;;1153:21;;1069:112;;;:::o;693:119:8:-;749:21;762:7;749:8;:12;;:21;;;;:::i;:::-;797:7;785:20;;;;;;;;;;;;693:119;:::o;818:127::-;877:24;893:7;877:8;:15;;:24;;;;:::i;:::-;930:7;916:22;;;;;;;;;;;;818:127;:::o;795:162:9:-;867:4;910:1;891:21;;:7;:21;;;;883:30;;;;;;;;930:4;:11;;:20;942:7;930:20;;;;;;;;;;;;;;;;;;;;;;;;;923:27;;795:162;;;;:::o;10753:347:0:-;10874:4;10899:15;:2;:13;;;:15::i;:::-;10898:16;10894:58;;;10937:4;10930:11;;;;10894:58;10962:13;10994:2;10978:36;;;11015:10;11027:4;11033:7;11042:5;10978:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10978:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10978:70:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10978:70:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10978:70:0;;;;;;;;;;;;;;;;10962:86;;732:10;11076:16;;11066:26;;;:6;:26;;;;11058:35;;;10753:347;;;;;;;:::o;11261:171::-;11360:1;11324:38;;:15;:24;11340:7;11324:24;;;;;;;;;;;;;;;;;;;;;:38;;;;11320:106;;;11413:1;11378:15;:24;11394:7;11378:24;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;11320:106;11261:171;:::o;1282:108:10:-;1362:21;1381:1;1362:7;:14;;;:18;;:21;;;;:::i;:::-;1345:7;:14;;:38;;;;1282:108;:::o;1187:89::-;1268:1;1250:7;:14;;;:19;;;;;;;;;;;1187:89;:::o;268:181:9:-;363:1;344:21;;:7;:21;;;;336:30;;;;;;;;385:18;389:4;395:7;385:3;:18::i;:::-;384:19;376:28;;;;;;;;438:4;415;:11;;:20;427:7;415:20;;;;;;;;;;;;;;;;:27;;;;;;;;;;;;;;;;;;268:181;;:::o;523:184::-;621:1;602:21;;:7;:21;;;;594:30;;;;;;;;642:18;646:4;652:7;642:3;:18::i;:::-;634:27;;;;;;;;695:5;672:4;:11;;:20;684:7;672:20;;;;;;;;;;;;;;;;:28;;;;;;;;;;;;;;;;;;523:184;;:::o;472:616:14:-;532:4;548:12;1047:7;1035:20;1027:28;;1080:1;1073:4;:8;1066:15;;;472:616;;;:::o;1175:145:13:-;1233:7;1265:1;1260;:6;;1252:15;;;;;;;;1277:9;1293:1;1289;:5;1277:17;;1312:1;1305:8;;;1175:145;;;;:::o",
  "source": "pragma solidity >=0.4.22 <0.6.0;\n\nimport \"./ERC721.sol\";\nimport \"../access/MinterRole.sol\";\n\n/**\n * @title ERC721Mintable\n * @dev ERC721 minting logic\n */\ncontract ERC721Mintable is ERC721, MinterRole {\n    /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param tokenId The token id to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address to, uint256 tokenId) public onlyMinter returns (bool) {\n        _mint(to, tokenId);\n        return true;\n    }\n}\n\n\n\ncontract SchwabToken is ERC721Mintable{\n  string public constant name = \"SchwabToken\";\n  string public constant symbol = \"SCHW\";\n}\n",
  "sourcePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/ERC721/SchwabToken.sol",
  "ast": {
    "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/ERC721/SchwabToken.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        691
      ],
      "SchwabToken": [
        700
      ]
    },
    "id": 701,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 665,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:3"
      },
      {
        "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 666,
        "nodeType": "ImportDirective",
        "scope": 701,
        "sourceUnit": 545,
        "src": "34:22:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/access/MinterRole.sol",
        "file": "../access/MinterRole.sol",
        "id": 667,
        "nodeType": "ImportDirective",
        "scope": 701,
        "sourceUnit": 2386,
        "src": "57:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 668,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 544,
              "src": "182:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$544",
                "typeString": "contract ERC721"
              }
            },
            "id": 669,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:3"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 670,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2385,
              "src": "190:10:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$2385",
                "typeString": "contract MinterRole"
              }
            },
            "id": 671,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:3"
          }
        ],
        "contractDependencies": [
          544,
          647,
          2385,
          2579,
          2589
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 691,
        "linearizedBaseContracts": [
          691,
          2385,
          544,
          647,
          2579,
          2589
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 689,
              "nodeType": "Block",
              "src": "518:56:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 683,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "534:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 684,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 675,
                        "src": "538:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 682,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 371,
                      "src": "528:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "528:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 686,
                  "nodeType": "ExpressionStatement",
                  "src": "528:18:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "563:4:3",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 681,
                  "id": 688,
                  "nodeType": "Return",
                  "src": "556:11:3"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 690,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 678,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 677,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2318,
                  "src": "492:10:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "492:10:3"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 676,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "456:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 672,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "456:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 675,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "468:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 674,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "455:29:3"
            },
            "returnParameters": {
              "id": 681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 680,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "512:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 679,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "512:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "511:6:3"
            },
            "scope": 691,
            "src": "442:132:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 701,
        "src": "155:421:3"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 692,
              "name": "ERC721Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 691,
              "src": "604:14:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Mintable_$691",
                "typeString": "contract ERC721Mintable"
              }
            },
            "id": 693,
            "nodeType": "InheritanceSpecifier",
            "src": "604:14:3"
          }
        ],
        "contractDependencies": [
          544,
          647,
          691,
          2385,
          2579,
          2589
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 700,
        "linearizedBaseContracts": [
          700,
          691,
          2385,
          544,
          647,
          2579,
          2589
        ],
        "name": "SchwabToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 696,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 700,
            "src": "622:43:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 694,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "622:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "536368776162546f6b656e",
              "id": 695,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "652:13:3",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_27609dccd3036745bf6df66b8bc91e364d5d22a278b6cce404d56d3f2c66953d",
                "typeString": "literal_string \"SchwabToken\""
              },
              "value": "SchwabToken"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 699,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 700,
            "src": "669:38:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 697,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "669:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53434857",
              "id": 698,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:6:3",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a364e2dab849898d695a0e7f07ca78bfedb52a56f2722da0ec3be399f83dc174",
                "typeString": "literal_string \"SCHW\""
              },
              "value": "SCHW"
            },
            "visibility": "public"
          }
        ],
        "scope": 701,
        "src": "580:130:3"
      }
    ],
    "src": "0:711:3"
  },
  "legacyAST": {
    "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/ERC721/SchwabToken.sol",
    "exportedSymbols": {
      "ERC721Mintable": [
        691
      ],
      "SchwabToken": [
        700
      ]
    },
    "id": 701,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 665,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:3"
      },
      {
        "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/ERC721/ERC721.sol",
        "file": "./ERC721.sol",
        "id": 666,
        "nodeType": "ImportDirective",
        "scope": 701,
        "sourceUnit": 545,
        "src": "34:22:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/dohyunshin/Projects/UTProjects/schwack-end/smart_contracts/contracts/access/MinterRole.sol",
        "file": "../access/MinterRole.sol",
        "id": 667,
        "nodeType": "ImportDirective",
        "scope": 701,
        "sourceUnit": 2386,
        "src": "57:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 668,
              "name": "ERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 544,
              "src": "182:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721_$544",
                "typeString": "contract ERC721"
              }
            },
            "id": 669,
            "nodeType": "InheritanceSpecifier",
            "src": "182:6:3"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 670,
              "name": "MinterRole",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2385,
              "src": "190:10:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MinterRole_$2385",
                "typeString": "contract MinterRole"
              }
            },
            "id": 671,
            "nodeType": "InheritanceSpecifier",
            "src": "190:10:3"
          }
        ],
        "contractDependencies": [
          544,
          647,
          2385,
          2579,
          2589
        ],
        "contractKind": "contract",
        "documentation": "@title ERC721Mintable\n@dev ERC721 minting logic",
        "fullyImplemented": true,
        "id": 691,
        "linearizedBaseContracts": [
          691,
          2385,
          544,
          647,
          2579,
          2589
        ],
        "name": "ERC721Mintable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 689,
              "nodeType": "Block",
              "src": "518:56:3",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 683,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "534:2:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 684,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 675,
                        "src": "538:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 682,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 371,
                      "src": "528:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "528:18:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 686,
                  "nodeType": "ExpressionStatement",
                  "src": "528:18:3"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "74727565",
                    "id": 687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "563:4:3",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 681,
                  "id": 688,
                  "nodeType": "Return",
                  "src": "556:11:3"
                }
              ]
            },
            "documentation": "@dev Function to mint tokens\n@param to The address that will receive the minted tokens.\n@param tokenId The token id to mint.\n@return A boolean that indicates if the operation was successful.",
            "id": 690,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 678,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 677,
                  "name": "onlyMinter",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2318,
                  "src": "492:10:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "492:10:3"
              }
            ],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 676,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "456:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 672,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "456:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 675,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "468:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 674,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "468:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "455:29:3"
            },
            "returnParameters": {
              "id": 681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 680,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 690,
                  "src": "512:4:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 679,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "512:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "511:6:3"
            },
            "scope": 691,
            "src": "442:132:3",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 701,
        "src": "155:421:3"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 692,
              "name": "ERC721Mintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 691,
              "src": "604:14:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Mintable_$691",
                "typeString": "contract ERC721Mintable"
              }
            },
            "id": 693,
            "nodeType": "InheritanceSpecifier",
            "src": "604:14:3"
          }
        ],
        "contractDependencies": [
          544,
          647,
          691,
          2385,
          2579,
          2589
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 700,
        "linearizedBaseContracts": [
          700,
          691,
          2385,
          544,
          647,
          2579,
          2589
        ],
        "name": "SchwabToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 696,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 700,
            "src": "622:43:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 694,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "622:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "536368776162546f6b656e",
              "id": 695,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "652:13:3",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_27609dccd3036745bf6df66b8bc91e364d5d22a278b6cce404d56d3f2c66953d",
                "typeString": "literal_string \"SchwabToken\""
              },
              "value": "SchwabToken"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "id": 699,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 700,
            "src": "669:38:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 697,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "669:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53434857",
              "id": 698,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "701:6:3",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a364e2dab849898d695a0e7f07ca78bfedb52a56f2722da0ec3be399f83dc174",
                "typeString": "literal_string \"SCHW\""
              },
              "value": "SCHW"
            },
            "visibility": "public"
          }
        ],
        "scope": 701,
        "src": "580:130:3"
      }
    ],
    "src": "0:711:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-01-26T08:29:32.030Z",
  "devdoc": {
    "details": "ERC721 minting logic",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mint(address,uint256)": {
        "details": "Function to mint tokens",
        "params": {
          "to": "The address that will receive the minted tokens.",
          "tokenId": "The token id to mint."
        },
        "return": "A boolean that indicates if the operation was successful."
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg.sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    },
    "title": "ERC721Mintable"
  },
  "userdoc": {
    "methods": {}
  }
}